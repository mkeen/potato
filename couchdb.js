// Generated by CoffeeScript 1.6.3
var Database, Server;

Database = (function() {
  function Database(server, name) {
    this.server = server;
    this.name = name;
  }

  Database.prototype.info = function(callback) {
    return this.server.get("/" + this.name, callback);
  };

  Database.prototype.changes = function(callback) {
    return this.server.stream('GET', "/" + this.name, function(jsonDocument) {
      return callback(jsonDocument);
    });
  };

  return Database;

})();

Server = (function() {
  function Server(address, port) {
    this.address = address;
    this.port = port;
  }

  Server.prototype.info = function(callback) {
    return this.get('/', function(responseJson) {
      return callback(responseJson);
    });
  };

  Server.prototype.all_dbs = function(callback) {
    return this.get('/_all_dbs', function(responseJson) {
      var db, dbs, _i, _len;
      dbs = [];
      for (_i = 0, _len = responseJson.length; _i < _len; _i++) {
        db = responseJson[_i];
        dbs.push(new Database(this, db));
      }
      return callback(dbs);
    });
  };

  Server.prototype.get = function(path, callback) {
    return this.xhr('GET', path, callback);
  };

  Server.prototype.xhr = function(method, path, callback) {
    var xhr;
    xhr = new XMLHttpRequest();
    xhr.open(method, "http://" + this.address + ":" + this.port + path, true);
    xhr.responseType = 'text';
    xhr.onload = function(event) {
      return callback(eval("(" + this.responseText + ")"));
    };
    return xhr.send();
  };

  Server.prototype.stream = function(method, path, callback) {
    var processed, tmpThis, xhr;
    processed = [];
    xhr = new XMLHttpRequest();
    xhr.open(method, "http://" + this.address + ":" + this.port + path + "/_changes?feed=continuous", true);
    xhr.responseType = 'text';
    tmpThis = this;
    xhr.onprogress = function(event) {
      var jsonItem, jsonItems, rawItem, rawItems, _i, _len;
      rawItems = this.responseText.split('\n');
      rawItems.pop();
      jsonItems = [];
      for (_i = 0, _len = rawItems.length; _i < _len; _i++) {
        rawItem = rawItems[_i];
        jsonItems.push(eval("(" + rawItem + ")"));
      }
      if ((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = jsonItems.length; _j < _len1; _j++) {
          jsonItem = jsonItems[_j];
          _results.push(processed.indexOf(jsonItems.seq) === -1);
        }
        return _results;
      })()) {
        return processed.push(jsonItem.seq) && tmpThis.get("" + path + "/" + jsonItem.id, function(documentJson) {
          return callback(documentJson);
        });
      }
    };
    return xhr.send();
  };

  return Server;

})();
