// Generated by CoffeeScript 1.7.1
var Database, Server;

Database = (function() {
  function Database(server, name) {
    this.server = server;
    this.name = name;
  }

  Database.prototype.info = function(callback) {
    return this.server.get("/" + this.name, callback);
  };

  Database.prototype.document = function(doc_id, callback) {
    return this.server.get("/" + this.name + "/" + doc_id, callback);
  };

  Database.prototype.changes = function(callback) {
    var database;
    database = this;
    return this.server.xhr('get', "/" + this.name + "/_changes?feed=continuous", {
      progress: function(doc) {
        return database.document(doc.id, function(full_doc) {
          return callback(full_doc);
        });
      }
    });
  };

  return Database;

})();

Server = (function() {
  function Server(address, port) {
    this.address = address;
    this.port = port;
    this.databases = {};
  }

  Server.prototype.info = function(callback) {
    return this.get('/', function(responseJson) {
      return callback(responseJson);
    });
  };

  Server.prototype.all_dbs = function(callback) {
    return this.get('/_all_dbs', function(responseJson) {
      var db, dbs, _i, _len;
      dbs = [];
      for (_i = 0, _len = responseJson.length; _i < _len; _i++) {
        db = responseJson[_i];
        dbs.push(new Database(this, db));
      }
      return callback(dbs);
    });
  };

  Server.prototype.database = function(name, callback) {
    var _base;
    return (_base = this.databases)[name] || (_base[name] = new Database(this, name));
  };

  Server.prototype.get = function(path, callback) {
    return this.xhr('GET', path, {
      load: callback
    });
  };

  Server.prototype.xhr = function(method, path, callbacks) {
    var lastbytes, xhr;
    xhr = new XMLHttpRequest();
    xhr.responseType = 'text';
    if (callbacks.load) {
      xhr.onload = function(event) {
        return callbacks.load(eval("(" + this.responseText + ")"));
      };
    }
    if (callbacks.progress) {
      lastbytes = 0;
      xhr.onprogress = function(event) {
        var current_data;
        current_data = event.target.responseText.substr(lastbytes, event.loaded);
        lastbytes = event.loaded;
        console.log("current_data");
        return callbacks.progress(eval("(" + current_data + ")"));
      };
    }
    xhr.open(method, "http://" + this.address + ":" + this.port + path, true);
    return xhr.send();
  };

  return Server;

})();
